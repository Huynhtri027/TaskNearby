apply plugin: 'com.android.application'

android {
    compileSdkVersion 27
    buildToolsVersion "27.0.0"
    defaultConfig {
        applicationId 'app.tasknearby.yashcreations.com.tasknearby'
        minSdkVersion 17
        targetSdkVersion 27
        versionCode 9
        versionName "3.7"
    }
    buildTypes {
//        def CONTENT_AUTHORITY = "CA"
        debug {
            // to allow debug and release both to be installed on device.
            // also, a different icon will be set for debug (see project structure).
            applicationIdSuffix '.debug'

        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    productFlavors { }
}

def supportLibVersion = "27.0.2"
def playServicesVersion = "11.8.0"
def archRoomVersion = "1.0.0"
def jodaTimeVersion = "2.9.9.1"

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    compile "com.android.support:appcompat-v7:$supportLibVersion"
    compile "com.android.support:cardview-v7:$supportLibVersion"
    compile "com.android.support:gridlayout-v7:$supportLibVersion"
    compile "com.android.support:design:$supportLibVersion"

    compile "com.google.android.gms:play-services-location:$playServicesVersion"
    compile "com.google.android.gms:play-services-maps:$playServicesVersion"
    compile "com.google.android.gms:play-services-places:$playServicesVersion"

    compile "com.google.firebase:firebase-core:$playServicesVersion"

    // Room
    compile "android.arch.persistence.room:runtime:$archRoomVersion"
    annotationProcessor "android.arch.persistence.room:compiler:$archRoomVersion"

    // Joda-time
    compile "net.danlew:android.joda:$jodaTimeVersion"

    // Annotations
    compile "com.android.support:support-annotations:$supportLibVersion"
}

// this has to be kept after the dependency block to avoid dependency collisions.
apply plugin: 'com.google.gms.google-services'

/**
 * Code quality checks.
 */
apply plugin: 'findbugs'
apply plugin: 'checkstyle'

// Performs checkstyle checks.
// https://tinyurl.com/ybf2p648
task checkstyleCheck(type: Checkstyle) {
    configFile file("${project.rootDir}/config/checkstyle/checkstyle.xml")
    classpath = files()
    source 'src'
    include '**/*.java'
    exclude '**/gen/**'
    // to fail the build when checkstyle is not passed.
    ignoreFailures false
    showViolations true
}

/**
 * Read more about findbugs in android project from these links:
 * https://stackoverflow.com/a/30068813/4857588
 * https://docs.gradle.org/current/dsl/org.gradle.api.plugins.quality.FindBugs.html
 */
task customFindbugs(type: FindBugs, dependsOn: assemble) {
    ignoreFailures false
    effort "default"
    reportLevel "medium"
    excludeFilter = new File("${project.rootDir}/config/findbugs/findbugs-exclude-filter.xml")
    classes = files("${project.projectDir}/build/intermediates/classes")
    source = fileTree("src/main/java/")
    classpath = files()
    reports {
        xml.enabled false
        html.enabled true
        html {
            setDestination(new File("${project.buildDir}/findbugs/findbugs-output.html"))
        }
    }
}

check.dependsOn checkstyleCheck
check.dependsOn customFindbugs
customFindbugs.shouldRunAfter checkstyleCheck // because checkstyle runs faster.